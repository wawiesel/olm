---
description: 
globs: 
alwaysApply: true
---
# OLM Project Core Rules

## Focused Rule Sets
This project uses modular rule documentation. See these focused rule sets for detailed guidance:

- **@project-overview.mdc** - Project setup, dependencies, and basic information
- **@development-workflow.mdc** - Branch protection, PR workflow, commit standards, and formatting guidelines  
- **@testing-philosophy.mdc** - Testing principles, fuzzy testing with Hypothesis
- **@last-session.mdc** - Summary of current/last session for continuity

## Quick Reference

### Essential Commands
```bash
# Setup
git checkout -b feature/description
pytest -n 6 .

# Commit & PR
git commit -F message.txt
gh pr create --title "Title" --body-file description.md
```

### Key Rules
- **No duplicate headers in PR descriptions** - Start descriptions with content, not title repetition
- **Clean imperative commits** - "Add feature X" not "feat: add feature X" 
- **Branch protection enforced** - All changes via PR, 1 review required
- **Fast focused tests** - Unit tests for logic, integration for workflows
- **Property-based fuzzy testing** - Mathematical correctness over implementation details

### Testing Framework
- **Framework**: pytest with pytest-xdist for parallel execution
- **Coverage**: Target high coverage with meaningful tests
- **Speed**: Fast unit tests (~milliseconds), reasonable integration tests
- **Fuzzy**: Hypothesis for property-based testing

### Project Structure
- **CLI**: Click framework
- **Testing**: `testing/` directory with comprehensive test suites
- **Coverage**: Aim for 100% on focused modules
- **Dependencies**: Python 3.9+, scientific stack (numpy, scipy, matplotlib)

## Project Memory via Git Log

### Git Log as Living Memory
Instead of maintaining separate memory files, we rely on git log with good commit messages:

```bash
# Find specific patterns
git log --grep="coverage" --oneline
git log --grep="test" --since="2024-01-01"

# See full context of changes  
git show <commit-hash>

# Find when/why code changed
git blame <file>
git log -p <file>  # Full history of a file

# Search by author or time period
git log --author="bot" --oneline
git log --since="1 month ago" --until="1 week ago"
```

### Benefits of Git Log Memory
- **Always current**: No manual maintenance required
- **Rich context**: Full diff and reasoning in each commit
- **Searchable**: Powerful query capabilities
- **Authoritative**: Single source of truth
- **Integrated**: Part of normal development workflow

This modular approach keeps rules focused and reusable. Reference specific rule files when you need detailed guidance on particular aspects of development. 